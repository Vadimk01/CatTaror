import os
import random
import time
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.getenv("TOKEN")
BASE_IMG_PATH = os.path.join(os.path.dirname(__file__), "TarotBot_img")

sent_messages = {}

# === –ê–í–¢–û–ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–ê–†–¢ ===
card_images = {}

# –°—Ç–∞—Ä—à–∏–µ –∞—Ä–∫–∞–Ω—ã
major_arcana = {
    "–®—É—Ç": "RWS_Tarot_00_Fool.jpg",
    "–ú–∞–≥": "RWS_Tarot_01_Magician.jpg",
    "–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞": "RWS_Tarot_02_High_Priestess.jpg",
    "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞": "RWS_Tarot_03_Empress.jpg",
    "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä": "RWS_Tarot_04_Emperor.jpg",
    "–ò–µ—Ä–æ—Ñ–∞–Ω—Ç": "RWS_Tarot_05_Hierophant.jpg",
    "–í–ª—é–±–ª—ë–Ω–Ω—ã–µ": "RWS_Tarot_06_Lovers.jpg",
    "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞": "RWS_Tarot_07_Chariot.jpg",
    "–°–∏–ª–∞": "RWS_Tarot_08_Strength.jpg",
    "–û—Ç—à–µ–ª—å–Ω–∏–∫": "RWS_Tarot_09_Hermit.jpg",
    "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã": "RWS_Tarot_10_WheelOf_Fortune.jpg",
    "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å": "RWS_Tarot_11_Justice.jpg",
    "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π": "RWS_Tarot_12_Hanged_Man.jpg",
    "–°–º–µ—Ä—Ç—å": "RWS_Tarot_13_Death.jpg",
    "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": "RWS_Tarot_14_Temperance.jpg",
    "–î—å—è–≤–æ–ª": "RWS_Tarot_15_Devil.jpg",
    "–ë–∞—à–Ω—è": "RWS_Tarot_16_Tower.jpg",
    "–ó–≤–µ–∑–¥–∞": "RWS_Tarot_17_Star.jpg",
    "–õ—É–Ω–∞": "RWS_Tarot_18_Moon.jpg",
    "–°–æ–ª–Ω—Ü–µ": "RWS_Tarot_19_Sun.jpg",
    "–°—Ç—Ä–∞—à–Ω—ã–π —Å—É–¥": "RWS_Tarot_20_Judgement.jpg",
    "–ú–∏—Ä": "RWS_Tarot_21_World.jpg"
}
for name, filename in major_arcana.items():
    card_images[name] = os.path.join(BASE_IMG_PATH, filename)

# –ú–ª–∞–¥—à–∏–µ –∞—Ä–∫–∞–Ω—ã
suits = {
    "–∫—É–±–∫–æ–≤": "Cups",
    "–º–µ—á–µ–π": "Swords",
    "–ø–µ–Ω—Ç–∞–∫–ª–µ–π": "Pents",
    "–∂–µ–∑–ª–æ–≤": "Wands"
}
names = {
    1: "–¢—É–∑",
    2: "–î–≤–æ–π–∫–∞",
    3: "–¢—Ä–æ–π–∫–∞",
    4: "–ß–µ—Ç–≤—ë—Ä–∫–∞",
    5: "–ü—è—Ç—ë—Ä–∫–∞",
    6: "–®–µ—Å—Ç—ë—Ä–∫–∞",
    7: "–°–µ–º—ë—Ä–∫–∞",
    8: "–í–æ—Å—å–º—ë—Ä–∫–∞",
    9: "–î–µ–≤—è—Ç–∫–∞",
    10: "–î–µ—Å—è—Ç–∫–∞",
    11: "–ü–∞–∂",
    12: "–†—ã—Ü–∞—Ä—å",
    13: "–ö–æ—Ä–æ–ª–µ–≤–∞",
    14: "–ö–æ—Ä–æ–ª—å"
}
for suit_ru, suit_en in suits.items():
    for num in range(1, 15):
        card_name = f"{names[num]} {suit_ru}"
        filename = f"{suit_en}{num:02}.jpg"
        card_images[card_name] = os.path.join(BASE_IMG_PATH, filename)

# === –ö–ù–û–ü–ö–ò ===
def get_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÆ –í—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É", callback_data="draw_card")],
        [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", callback_data="clear_chat")]
    ])

# === –°–õ–£–ß–ê–ô–ù–ê–Ø –ö–ê–†–¢–ê ===
def get_random_card():
    seed = int(time.time() * 1000)
    random.seed(seed)
    card = random.choice(list(card_images.keys()))
    #position = random.choice(["–ø—Ä—è–º–æ–µ", "–ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–æ–µ"])
    return card #, position

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É –¢–∞—Ä–æ üîÆ", reply_markup=get_keyboard())
    sent_messages.setdefault(update.effective_chat.id, []).append(message.message_id)

# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.message.chat.id
    await query.answer()

    if query.data == "draw_card":
        card """, position""" = get_random_card()
        caption = f"üÉè –¢–≤–æ—è –∫–∞—Ä—Ç–∞: {card} "
        image_path = card_images.get(card)

        if image_path and os.path.exists(image_path):
            with open(image_path, 'rb') as img:
                msg = await query.message.reply_photo(photo=img, caption=caption, reply_markup=get_keyboard())
        else:
            msg = await query.message.reply_text(caption + "\n(–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)", reply_markup=get_keyboard())

        sent_messages.setdefault(chat_id, []).append(msg.message_id)

    elif query.data == "clear_chat":
        for msg_id in sent_messages.get(chat_id, []):
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
            except:
                pass
        sent_messages[chat_id] = []
        msg = await query.message.reply_text("üßπ –û—á–∏—â–µ–Ω–æ!", reply_markup=get_keyboard())
        sent_messages[chat_id].append(msg.message_id)

# === –ó–ê–ü–£–°–ö ===
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.run_polling()

if __name__ == "__main__":
    main()
